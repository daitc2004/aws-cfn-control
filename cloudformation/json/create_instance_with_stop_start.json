{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Launch an instance.",
  "Resources": {
    "MyInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType"     : { "Ref" : "MyInstanceType" },
        "SubnetId"         : { "Ref" : "MySubnet" },
        "ImageId"          : { "Fn::FindInMap" :  [ "AWSRegionAMI", { "Ref" : "AWS::Region" } , "HVM64" ] },
        "KeyName"          :         { "Ref": "MyKeyName"  },
        "SecurityGroupIds" : [ { "Ref": "MySecurityGroups" } ],
        "UserData"         : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "echo hello > /tmp/file.txt\n",
          "signal_url=",  { "Ref" : "MyWaitHandle" }, "\n",
          "# Send success signal after 60 seconds\n",
          "sleep 60\n",
          "curl -X PUT -H 'Content-Type:' --data-binary",
          " '{ \"Status\" : \"SUCCESS\",",
             " \"Reason\" : \"Instance Launched\",",
             " \"UniqueId\" : \"ABC123\",",
             " \"Data\" : \"Instance has launched.\"}' ",
             "\"",  { "Ref" : "MyWaitHandle" } , "\"" , "\n"
          ]]}}
      }
    },
    "MyWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },
    "MyWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "MyInstance",
      "Properties" : {
        "Handle" : { "Ref" : "MyWaitHandle" },
        "Timeout" : "300"
      }
    },
    "InstanceStopStart": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
          "ZipFile" : { "Fn::Join" : ["", [
            "import json\n",
            "import cfnresponse\n",
            "def handler(event, context):\n",
            "   print(\"My Instance ID: ", { "Ref": "MyInstance" }, "\")\n"
          ]]}
        },
        "Runtime": "python2.7",
        "Timeout": "60"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Parameters": {
    "MyInstanceType": {
      "Description": "My instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro"
      ],
      "ConstraintDescription": "None"
    },
    "MyKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "MySubnet": {
      "Description": "Subnet IDs",
      "Type":  "AWS::EC2::Subnet::Id"
    },
    "MySecurityGroups": {
      "Description": "Security Groups IDs",
      "Type":  "AWS::EC2::SecurityGroup::Id"
    }
  },
  "Mappings" : {
    "AWSRegionAMI": {
      "us-east-1": {
        "HVM64": "ami-0b33d91d"
      }
    }
  },
  "Outputs" : {
    "InstanceID" : {
      "Description": "The Instance ID",
      "Value" : { "Ref" : "MyInstance" }
    },
    "InstancePublicIP" : {
      "Value" :  { "Fn::GetAtt" : [ "MyInstance" , "PublicIp" ]}
    }
  }
}

