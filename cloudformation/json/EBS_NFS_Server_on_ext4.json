{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Setup IAM role and security groups, launch instance, create/attach 8 EBS volumes, create RAID0, setup NFS server, export NFS share",
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Instance Parameters"
          },
          "Parameters": [
            "VPCId",
            "Subnet",
            "UsePublicIp",
            "KeyName",
            "NFSInstanceType",
            "SSHLocation",
            "ExistingSecurityGroup",
            "PlacementGroup",
            "BucketName"
          ]
        },
        {
          "Label": {
            "default": "Storage Options - Required"
          },
          "Parameters": [
            "RAIDLevel",
            "VolumeSize",
            "VolumeType",
            "NFSIops"
          ]
        },
        {
          "Label": {
            "default": "NFS Options - Required"
          },
          "Parameters": [
            "NFSCidr",
            "NFSOpts"
          ]
        }
      ]
    }
  },
  "Resources": {
    "NFSInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType"        : { "Ref" : "NFSInstanceType" },
        "SubnetId"            : { "Ref" : "Subnet" },
        "AssociatePublicIpAddress" : { "Ref" : "UsePublicIp" },
        "ImageId"             : { "Fn::FindInMap" :  [ "AWSRegionAMI", { "Ref" : "AWS::Region" } , "HVM64" ] },
        "KeyName"             : { "Ref": "KeyName"  },
        "SecurityGroupIds"    : [ { "Ref": "NFSSecurityGroup" },
                                  { "Ref": "SSHSecurityGroup" },
                                  {
                                    "Fn::If" : [
                                      "UseExistingSecurityGroup",
                                      {
                                        "Ref" : "ExistingSecurityGroup"
                                      },
                                      {
                                        "Ref" : "AWS::NoValue"
                                      }
                                    ]
                                  }
                                ],
        "PlacementGroupName"  : { "Ref":  "PlacementGroup"},
        "IamInstanceProfile"  : { "Ref": "RootInstanceProfile" },
        "UserData"            : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -x\n",
          "echo checking > /tmp/file.txt\n",
          "count=0\n",
          "function mk_raid {\n",
          "  yes | sudo mdadm --create --verbose /dev/md0 --level=", { "Ref": "RAIDLevel" }, " --name=raid-vol1 --raid-devices=8 /dev/sdh /dev/sdi /dev/sdj /dev/sdk /dev/sdl /dev/sdm /dev/sdn /dev/sdo\n",
          "  sudo mkfs.ext4 -L nfs_raid /dev/md0\n",
          "  sudo mkdir /fs1\n",
          "  sudo mount LABEL=nfs_raid /fs1\n",
          "  sudo su -c \"echo 'LABEL=nfs_raid       /fs1   ext4    defaults,nofail        0       2' >> /etc/fstab\"\n",
          "}\n",
          "function ck_devs {\n",
          "  devs_ready=0\n",
          "  for l in {h..o}; do\n",
          "    if [[ ! -b /dev/xvd${l} ]]; then\n",
          "      devs_ready=0\n",
          "      ((count = $count + 1))\n",
          "      if [[ $count -gt 30 ]]; then\n",
          "        echo \"Devices not ready, exiting...\"\n",
          "        exit\n",
          "      else\n",
          "        sleep 10\n",
          "        ck_devs\n",
          "      fi\n",
          "    else\n",
          "      devs_ready=1\n",
          "    fi\n",
          "  done\n",
          "  echo \"Devices ready.\"\n",
          "}\n",
          "function nfs_server_settings { \n",
          "  sudo su -c 'echo -e \"",
          "STATD_PORT=\\\"32765\\\"\\n",
          "STATD_OUTGOING_PORT=\\\"32766\\\"\\n",
          "STATDARG=\\\"-p 32765 -o 32766\\\"\\n",
          "MOUNTD_PORT=\\\"32767\\\"\\n",
          "RPCMOUNTDOPTS=\\\"-p 32767\\\"\n",
          "LOCKD_UDPPORT=\\\"32768\\\"\\n",
          "LOCKD_TCPPORT=\\\"32768\\\"\\n",
          "RQUOTAD_PORT=\\\"32769\\\"\\n",
          "RQUOTAD=\\\"no\\\"\\n",
          "RPCNFSDCOUNT=\\\"128\\\"\"' > /etc/sysconfig/nfs \n",
          "} \n",
          "function nfs_config { \n",
          "  nfs_server_settings \n",
          "  if [[ \"", { "Ref": "NFSCidr" }, "\" = \"0.0.0.0/0\" ]]; then \n",
          "    sudo su -c 'echo \"/fs1 *", { "Ref": "NFSOpts" }, "\" > /etc/exports' \n",
          "  else\n",
          "    sudo su -c 'echo \"/fs1 ", { "Ref": "NFSCidr" }, { "Ref": "NFSOpts" }, "\" > /etc/exports' \n",
          "  fi \n",
          "  sudo chkconfig nfs on \n",
          "  sudo /etc/init.d/nfs start \n",
          "  sudo exportfs -av \n",
          "  sudo showmount -e localhost \n",
          "} \n",
          "function status_ec2_signal {\n",
          "  sudo mount | grep \"/fs1\"\n",
          "  let fs_mount_rc=$?\n",
          "  sudo showmount -e localhost | grep -v Export | grep \"/fs1\"\n",
          "  let nfs_status_rc=$?\n",
          "  if [[ \"$nfs_status_rc\" -eq 0 ]] && [[ \"$fs_mount_rc\" -eq 0 ]]; then\n",
          "    echo \"NFS installed and configure\"\n",
          "    curl -X PUT -H 'Content-Type:' --data-binary",
          "      '{ \"Status\" : \"SUCCESS\",",
          "      \"Reason\" : \"Instance Launched with file system created and NFS exports\",",
          "      \"UniqueId\" : \"NFS001\",",
          "      \"Data\" : \"Instance has launched with file system created and NFS exports.\"}' ",
          "      \"",  { "Ref" : "MyWaitHandle" } , "\"" , "\n",
          "  else\n",
          "    echo \"ERROR: FS and NFS is not installed and configure\"\n",
          "    curl -X PUT -H 'Content-Type:' --data-binary",
          "      '{ \"Status\" : \"FAILURE\",",
          "      \"Reason\" : \"ERROR: FS and NFS is not installed and configure\",",
          "      \"UniqueId\" : \"NFS002\",",
          "      \"Data\" : \"ERROR: FS and NFS is not installed and configure\"}' ",
          "      \"",  { "Ref" : "MyWaitHandle" } , "\"" , "\n",
          "  fi\n",
          "}\n",
          "while [[ ! $devs_ready ]]; do\n",
          "  ck_devs\n",
          "done\n",
          "mk_raid\n",
          "nfs_config\n",
          "status_ec2_signal\n", "\n"
        ]]}}
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": {
            "Version" : "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:ListBucket"
                ],
                "Resource": {
                  "Fn::If": [
                    "Has_Bucket",
                    { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "BucketName" } ] ] },
                    { "Fn::Join" : [ "", [ "arn:aws:s3:::", "BOGUS_NULL_VALUE" ] ] }
                  ]
                }
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject"
                ],
                "Resource": {
                  "Fn::If": [
                    "Has_Bucket",
                    { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "BucketName" } , "/*" ] ] },
                    { "Fn::Join" : [ "", [ "arn:aws:s3:::", "BOGUS_NULL_VALUE" , "/*" ] ] }
                  ]
                }
              }
            ]
          }
        } ]
      }
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "RootRole"
        } ]
      }
    },
    "NFSSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "NFS Security Group",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "2049",
          "ToPort": "2049",
          "CidrIp": { "Ref": "NFSCidr" }
        } ]
      }
    },
    "SSHSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "SSH Security Group",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": { "Ref": "SSHLocation" }
        } ]
      }
    },
    "MyWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },
    "WaitDevsExt4Nfs" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "NFSInstance",
      "Properties" : {
        "Handle" : { "Ref" : "MyWaitHandle" },
        "Timeout" : "300"
      }
    },
    "Volume01" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize"},
        "VolumeType" :  { "Ref" : "VolumeType" },
        "Iops" : { "Fn::If" : [ "Create_io1", { "Ref": "NFSIops"}, { "Ref": "AWS::NoValue" } ] },
        "Encrypted" : "true",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "NFSInstance", "AvailabilityZone" ] },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "NFS_Vol"
        } ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "VolMountPoint01" : {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": { "Ref": "NFSInstance" },
        "VolumeId": { "Ref": "Volume01" },
        "Device": "/dev/sdh"
      }
    },
    "Volume02" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize"},
        "VolumeType" :  { "Ref" : "VolumeType" },
        "Iops" : { "Fn::If" : [ "Create_io1", { "Ref": "NFSIops"}, { "Ref": "AWS::NoValue" } ] },
        "Encrypted" : "true",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "NFSInstance", "AvailabilityZone" ] },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "NFS_Vol"
        } ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "VolMountPoint02" : {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": { "Ref": "NFSInstance" },
        "VolumeId": { "Ref": "Volume02" },
        "Device": "/dev/sdi"
      }
    },
    "Volume03" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize"},
        "VolumeType" :  { "Ref" : "VolumeType" },
        "Iops" : { "Fn::If" : [ "Create_io1", { "Ref": "NFSIops"}, { "Ref": "AWS::NoValue" } ] },
        "Encrypted" : "true",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "NFSInstance", "AvailabilityZone" ] },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "NFS_Vol"
        } ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "VolMountPoint03" : {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": { "Ref": "NFSInstance" },
        "VolumeId": { "Ref": "Volume03" },
        "Device": "/dev/sdj"
      }
    },
    "Volume04" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize"},
        "VolumeType" :  { "Ref" : "VolumeType" },
        "Iops" : { "Fn::If" : [ "Create_io1", { "Ref": "NFSIops"}, { "Ref": "AWS::NoValue" } ] },
        "Encrypted" : "true",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "NFSInstance", "AvailabilityZone" ] },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "NFS_Vol"
        } ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "VolMountPoint04" : {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": { "Ref": "NFSInstance" },
        "VolumeId": { "Ref": "Volume04" },
        "Device": "/dev/sdk"
      }
    },
    "Volume05" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize"},
        "VolumeType" :  { "Ref" : "VolumeType" },
        "Iops" : { "Fn::If" : [ "Create_io1", { "Ref": "NFSIops"}, { "Ref": "AWS::NoValue" } ] },
        "Encrypted" : "true",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "NFSInstance", "AvailabilityZone" ] },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "NFS_Vol"
        } ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "VolMountPoint05" : {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": { "Ref": "NFSInstance" },
        "VolumeId": { "Ref": "Volume05" },
        "Device": "/dev/sdl"
      }
    },
    "Volume06" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize"},
        "VolumeType" :  { "Ref" : "VolumeType" },
        "Iops" : { "Fn::If" : [ "Create_io1", { "Ref": "NFSIops"}, { "Ref": "AWS::NoValue" } ] },
        "Encrypted" : "true",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "NFSInstance", "AvailabilityZone" ] },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "NFS_Vol"
        } ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "VolMountPoint06" : {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": { "Ref": "NFSInstance" },
        "VolumeId": { "Ref": "Volume06" },
        "Device": "/dev/sdm"
      }
    },
    "Volume07" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize"},
        "VolumeType" :  { "Ref" : "VolumeType" },
        "Iops" : { "Fn::If" : [ "Create_io1", { "Ref": "NFSIops"}, { "Ref": "AWS::NoValue" } ] },
        "Encrypted" : "true",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "NFSInstance", "AvailabilityZone" ] },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "NFS_Vol"
        } ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "VolMountPoint07" : {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": { "Ref": "NFSInstance" },
        "VolumeId": { "Ref": "Volume07" },
        "Device": "/dev/sdn"
      }
    },
    "Volume08" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize"},
        "VolumeType" :  { "Ref" : "VolumeType" },
        "Iops" : { "Fn::If" : [ "Create_io1", { "Ref": "NFSIops"}, { "Ref": "AWS::NoValue" } ] },
        "Encrypted" : "true",
        "AvailabilityZone" : { "Fn::GetAtt" : [ "NFSInstance", "AvailabilityZone" ] },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : "NFS_Vol"
        } ]
      },
      "DeletionPolicy" : "Snapshot"
    },
    "VolMountPoint08" : {
      "Type": "AWS::EC2::VolumeAttachment",
      "Properties": {
        "InstanceId": { "Ref": "NFSInstance" },
        "VolumeId": { "Ref": "Volume08" },
        "Device": "/dev/sdo"
      }
    }
  },
  "Parameters": {
    "NFSInstanceType": {
      "Description": "NFS instance type",
      "Type": "String",
      "Default": "m4.16xlarge",
      "AllowedValues": [
        "m4.16xlarge",
        "r4.16xlarge",
        "c8.8xlarge"
      ],
      "ConstraintDescription": "Must an EC2 instance type from the list"
    },
    "KeyName": {
      "Description": "Existing EC2 KeyPair to enable SSH access to the instance.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "VPCId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC Id for this instance"
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet for this instance"
    },
    "UsePublicIp" : {
      "Description" : "Should a public IP address be given to the instance",
      "Type" : "String",
      "Default" : "False",
      "ConstraintDescription" : "True/False",
      "AllowedValues" : [
        "True",
        "False"
      ]
    },
    "ExistingSecurityGroup": {
      "Description": "OPTIONAL: Existing Security Group, format sg-xxxxxxxx",
      "Type": "String",
      "Default": "",
      "AllowedPattern" : "(|^sg-[0-9a-z]{8}$)"
    },
    "PlacementGroup" : {
      "Description" : "OPTIONAL:  Existing placement group",
      "Type" : "String"
    },
    "SSHLocation": {
      "Description": "REQUIRED: The IP address range that can be used to access the instance using SSH.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "Default" : "10.0.0.0/16"
    },
    "BucketName": {
      "Description": "OPTIONAL: specify s3 bucket for read (get/list) access only",
      "Type": "String"
    },
    "VolumeSize": {
      "Description": "Size (GB) of each of the EBS volumes, there will be 8 volumes created just for NFS",
      "Type": "Number",
      "Default": "100"
    },
    "VolumeType": {
      "Description": "Type of volumes to create",
      "Type": "String",
      "Default": "gp2",
      "ConstraintDescription": "Must be a either: gp2, io1",
      "AllowedValues": [
        "gp2",
        "io1"
      ]
    },
    "NFSIops": {
      "Description": "Iops, only used with io1 volumes",
      "Type": "String",
      "Default": "1000"
    },
    "NFSCidr": {
      "Description": "CIDR for NFS Security Group and NFS clients, to allow all access use 0.0.0.0/0",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "Default": "10.0.0.0/16"
    },
    "NFSOpts": {
      "Description": "NFS export options",
      "Type": "String",
      "Default": "(rw,sync,no_root_squash)"
    },
    "RAIDLevel" : {
      "Description": "RAID Level, currently only 0 (striping) is supported",
      "Type": "String",
      "Default": "0",
      "AllowedValues": [
        "0"
      ],
      "ConstraintDescription": "Must be 0"
    }
  },
  "Conditions" : {
    "Create_io1" : { "Fn::Equals": [ { "Ref": "VolumeType" }, "io1" ]},
    "Has_Bucket" : { "Fn::Not": [ { "Fn::Equals": [ { "Ref" : "BucketName" } , "" ]}]},
    "UseExistingSecurityGroup" : { "Fn::Not": [ { "Fn::Equals": [ { "Ref" : "ExistingSecurityGroup" } , "" ]}]},
    "Has_Public_Ip": { "Fn::Equals": [ { "Ref": "UsePublicIp"}, "True" ]}
  },
  "Mappings" : {
    "AWSRegionAMI": {
      "ap-northeast-1": {
        "HVM64": "ami-56d4ad31"
      },
      "ap-northeast-2": {
        "HVM64": "ami-dac312b4"
      },
      "ap-south-1": {
        "HVM64": "ami-f9daac96"
      },
      "ap-southeast-1": {
        "HVM64": "ami-dc9339bf"
      },
      "ap-southeast-2": {
        "HVM64": "ami-1c47407f"
      },
      "ca-central-1": {
        "HVM64": "ami-ebed508f"
      },
      "eu-central-1": {
        "HVM64": "ami-af0fc0c0"
      },
      "eu-west-1": {
        "HVM64": "ami-70edb016"
      },
      "eu-west-2": {
        "HVM64": "ami-f1949e95"
      },
      "sa-east-1": {
        "HVM64": "ami-80086dec"
      },
      "us-east-1": {
        "HVM64": "ami-0b33d91d"
      },
      "us-east-2": {
        "HVM64": "ami-c55673a0"
      },
      "us-west-1": {
        "HVM64": "ami-165a0876"
      },
      "us-west-2": {
        "HVM64": "ami-f173cc91"
      }
    }
  },
  "Outputs" : {
    "InstanceID" : {
      "Description": "Instance ID",
      "Value" : { "Ref" : "NFSInstance" }
    },
    "InstancePrivateIP" : {
      "Value" :  { "Fn::GetAtt" : [ "NFSInstance" , "PrivateIp" ]}
    },
    "InstancePublicIP" : {
      "Value" :  { "Fn::GetAtt" : [ "NFSInstance" , "PublicIp" ]},
      "Condition" : "Has_Public_Ip"
    },
    "PrivateMountPoint" : {
      "Description": "Mount point on private network",
      "Value" : { "Fn::Join" :  [ "", [ { "Fn::GetAtt" : [ "NFSInstance" , "PrivateIp" ] } , ":/fs1"  ] ] }
    },
    "ExampleClientMountCommands" : {
      "Description": "Example commands to mount NFS on the clients",
      "Value" : { "Fn::Join" :  [ "", [ "sudo mkdir /nfs1; sudo mount " , { "Fn::GetAtt" : [ "NFSInstance" , "PrivateIp" ] } , ":/fs1 /nfs1"  ] ] }
    },
    "BucketName" : {
      "Value" : { "Ref" : "BucketName" },
      "Condition" :  "Has_Bucket"
    },
    "Volume01" : { "Value" : { "Ref" : "Volume01" } },
    "Volume02" : { "Value" : { "Ref" : "Volume02" } },
    "Volume03" : { "Value" : { "Ref" : "Volume03" } },
    "Volume04" : { "Value" : { "Ref" : "Volume04" } },
    "Volume05" : { "Value" : { "Ref" : "Volume05" } },
    "Volume06" : { "Value" : { "Ref" : "Volume06" } },
    "Volume07" : { "Value" : { "Ref" : "Volume07" } },
    "Volume08" : { "Value" : { "Ref" : "Volume08" } }
  }
}

