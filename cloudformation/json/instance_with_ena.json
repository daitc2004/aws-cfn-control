{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Launch an instance, etc.",
  "Resources": {
    "MyInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType"     : { "Ref" : "MyInstanceType" },
        "SubnetId"         : { "Ref" : "MySubnet" },
        "ImageId"          : { "Fn::FindInMap" :  [ "AWSRegionAMI", { "Ref" : "AWS::Region" } , "HVM64" ] },
        "KeyName"          :         { "Ref": "MyKeyName"  },
        "SecurityGroupIds" : [ { "Ref": "MySecurityGroups" } ],
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "UserData"         : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/usr/bin/bash -x\n",
          "function cr_setup_file {\n",
          "  if [[ ! -e /tmp/setup_ena.sh ]]; then\n",
          "    curl http://169.254.169.254/latest/user-data > /tmp/setup_ena.sh\n",
          "  fi\n",
          "}\n",
          "function cr_cron_entry {\n",
          "  echo \"* * * * * /tmp/setup_ena.sh\" > /tmp/mycron\n",
          "  sudo chmod 755 /tmp/setup_ena.sh\n",
          "  sudo crontab /tmp/mycron\n",
          "  sudo crontab -l\n",
          "}\n",
          "function build_inst_ena {\n",
          "  pushd /tmp\n",
          "  if [[ ! -d amzn-drivers ]]; then\n",
          "    git clone https://github.com/amzn/amzn-drivers\n",
          "  fi\n",
          "  cd amzn-drivers/kernel/linux/ena/\n",
          "  make\n",
          "  if [[ $? -eq 0 ]]; then\n",
          "    sudo cp ena.ko /lib/modules/$(uname -r)/\n",
          "    sudo insmod ena.ko\n",
          "    sudo su -c \"echo ena > /etc/modules-load.d/ena.conf\"\n",
          "    sudo depmod\n",
          "  fi\n",
          "  popd\n",
          "}\n",
          "function fix_net_dev_names {\n",
          "  sudo sed -i '/^GRUB\\_CMDLINE\\_LINUX/s/\\\"$/\\ net\\.ifnames\\=0\\\"/' /etc/default/grub\n",
          "  sudo grub2-mkconfig -o /boot/grub2/grub.cfg\n",
          "}\n",
          "function install_reqs {\n",
          "  sudo yum install vim git gcc -y\n",
          "  sudo yum update -y\n",
          "  sudo yum install kernel-devel -y\n",
          "}\n",
          "function ck_ena {\n",
          "  sudo modinfo ena\n",
          "  ena_rc=$?\n",
          "  if [[ \"$ena_rc\" -ne 0 ]]; then\n",
          "    let no_ena=1\n",
          "  else\n",
          "    let no_ena=0\n",
          "  fi\n",
          "}\n",
          "function ck_count {\n",
          "  if [[ -e  /tmp/ena_setup_count ]]; then\n",
          "    let setup_count=$(sudo cat /tmp/ena_setup_count)\n",
          "    ((setup_count=$setup_count+1))\n",
          "    sudo echo $setup_count > /tmp/ena_setup_count\n",
          "  else\n",
          "    sudo echo 1 > /tmp/ena_setup_count\n",
          "  fi\n",
          "}\n",
          "ck_count\n",
          "ck_ena\n",
          "if [[ \"$no_ena\" -eq 1 ]]; then\n",
          "  if [[ \"$setup_count\" -gt 3 ]]; then\n",
          "    echo \"Can not install ENA drivers\"\n",
          "    exit\n",
          "  else\n",
          "    install_reqs\n",
          "    build_inst_ena\n",
          "    fix_net_dev_names\n",
          "    cr_setup_file\n",
          "    cr_cron_entry\n",
          "    echo \"Rebooting...\"\n",
          "    sudo reboot\n",
          "  fi\n",
          "elif [[ \"$no_ena\" -eq 0 ]]; then\n",
          "  echo \"ENA drivers are installed\"\n",
          "  sudo crontab -r\n",
          "fi\n", "\n"
          ]]}}
      }
    },
    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
          } ]
        },
        "Roles": [ { "Ref": "RootRole" } ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "RootRole" } ]
      }
    },
    "SubnetInfoFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "Code": {
          "ZipFile": "function sendResponse(e,o,s,n){var r=JSON.stringify({Status:s,Reason:\"See the details in CloudWatch Log Stream: \"+o.logStreamName,PhysicalResourceId:o.logStreamName,StackId:e.StackId,RequestId:e.RequestId,LogicalResourceId:e.LogicalResourceId,Data:n});console.log(\"RESPONSE BODY:\\n\",r);var t=require(\"https\"),a=require(\"url\"),i=a.parse(e.ResponseURL),l={hostname:i.hostname,port:443,path:i.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":r.length}};console.log(\"SENDING RESPONSE...\\n\");var d=t.request(l,function(e){console.log(\"STATUS: \"+e.statusCode),console.log(\"HEADERS: \"+JSON.stringify(e.headers)),o.done()});d.on(\"error\",function(e){console.log(\"sendResponse Error:\"+e),o.done()}),d.write(r),d.end()}var aws=require(\"aws-sdk\");exports.handler=function(e,o){if(console.log(\"REQUEST RECEIVED:\\n\"+JSON.stringify(e)),\"Delete\"==e.RequestType)return void sendResponse(e,o,\"SUCCESS\");var s=\"FAILED\",n={},r=new aws.EC2({region:e.ResourceProperties.Region});r.describeSubnets({SubnetIds:[e.ResourceProperties.MasterSubnetId]},function(r,t){if(r)n={Error:\"describeSubnets call failed\"},console.log(n.Error+\":\\n\",r);else{var a=t.Subnets;s=\"SUCCESS\",n.SubnetID=a[0].subnetId,n.VpcId=a[0].VpcId,n.CidrBlock=a[0].CidrBlock,n.AvailabilityZone=a[0].AvailabilityZone}sendResponse(e,o,s,n)})};"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": "30"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "DependsOn": [
        "RootRole"
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    }
  },
  "Parameters": {
    "MyInstanceType": {
      "Description": "My instance type",
      "Type": "String",
      "Default": "m4.10xlarge",
      "AllowedValues": [
        "m4.10xlarge",
        "i3.8xlarge",
        "i3.16xlarge"
      ],
      "ConstraintDescription": "must be an EC2 instance type with instance store"
    },
    "MyKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used access the web server using SSH.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "MySubnet": {
      "Description": "Subnet IDs",
      "Type":  "AWS::EC2::Subnet::Id"
    },
    "MySecurityGroups": {
      "Description": "Security Groups IDs",
      "Type":  "AWS::EC2::SecurityGroup::Id"
    }
  },
  "Mappings" : {
    "AWSRegionAMI": {
      "us-east-1": {
        "HVM64": "ami-b63769a1"
      }
    }
  },
  "Outputs" : {
    "InstanceID" : {
      "Description": "The Instance ID",
      "Value" : { "Ref" : "MyInstance" }
    },
    "InstancePublicIP" : {
      "Value" :  { "Fn::GetAtt" : [ "MyInstance" , "PublicIp" ]}
    }
  }
}

