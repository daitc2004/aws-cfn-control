{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "create_elastic_ip": {
      "Fn::Equals": [
        {
          "Ref": "CreateElasticIP"
        },
        "True"
      ]
    },
    "use_public_ip": {
      "Fn::Equals": [
        {
          "Ref": "UsePublicIp"
        },
        "True"
      ]
    }
  },
  "Description": "Launch an ASG, with placement group, with SSH Keys, (a lot more).  Initial creation or the ASG, you can increase the ASG on the console or using the command line (in the output) to your desired number",
  "Mappings": {
    "AWSRegionAMI": {
      "ap-northeast-1": {
        "alinux": "ami-3bd3c45c",
        "centos6": "ami-f61c3e91",
        "centos7": "ami-571e3c30",
        "rhel7": "ami-30ef0556",
        "suse11": "ami-3deaff5a",
        "suse12": "ami-a07560c7",
        "ubuntu14": "ami-2e866b48",
        "ubuntu16": "ami-ea4eae8c"
      },
      "ap-northeast-2": {
        "alinux": "ami-e21cc38c",
        "centos6": "ami-fecb1990",
        "centos7": "ami-97cb19f9",
        "rhel7": "ami-0f5a8361",
        "suse11": "ami-b9c01fd7",
        "suse12": "ami-86d00fe8",
        "ubuntu14": "ami-eedb0280",
        "ubuntu16": "ami-d28a53bc"
      },
      "ap-south-1": {
        "alinux": "ami-47205e28",
        "centos6": "ami-e6f48789",
        "centos7": "ami-11f0837e",
        "rhel7": "ami-e41b618b",
        "suse11": "ami-91d1aefe",
        "suse12": "ami-62e39c0d",
        "ubuntu14": "ami-ea364d85",
        "ubuntu16": "ami-099fe766"
      },
      "ap-southeast-1": {
        "alinux": "ami-77af2014",
        "centos6": "ami-4d348a2e",
        "centos7": "ami-30318f53",
        "rhel7": "ami-10bb2373",
        "suse11": "ami-d5fa76b6",
        "suse12": "ami-f1078a92",
        "ubuntu14": "ami-49b5282a",
        "ubuntu16": "ami-6f198a0c"
      },
      "ap-southeast-2": {
        "alinux": "ami-10918173",
        "centos6": "ami-7a959b19",
        "centos7": "ami-24959b47",
        "rhel7": "ami-ccecf5af",
        "suse11": "ami-63041400",
        "suse12": "ami-197a6a7a",
        "ubuntu14": "ami-34594757",
        "ubuntu16": "ami-e2021d81"
      },
      "ca-central-1": {
        "alinux": "ami-a7aa15c3",
        "centos6": "ami-00e45864",
        "centos7": "ami-daeb57be",
        "rhel7": "ami-dad866be",
        "suse11": "ami-a6d26dc2",
        "suse12": "ami-d5d56ab1",
        "ubuntu14": "ami-2e00bf4a",
        "ubuntu16": "ami-9818a7fc"
      },
      "eu-central-1": {
        "alinux": "ami-82be18ed",
        "centos6": "ami-11a2707e",
        "centos7": "ami-7cbc6e13",
        "rhel7": "ami-d74be5b8",
        "suse11": "ami-a03d9acf",
        "suse12": "ami-984ee9f7",
        "ubuntu14": "ami-d448e4bb",
        "ubuntu16": "ami-1e339e71"
      },
      "eu-west-1": {
        "alinux": "ami-d7b9a2b1",
        "centos6": "ami-8f043ee9",
        "centos7": "ami-0d063c6b",
        "rhel7": "ami-bb9a6bc2",
        "suse11": "ami-7afbe31c",
        "suse12": "ami-f5776f93",
        "ubuntu14": "ami-1e749f67",
        "ubuntu16": "ami-785db401"
      },
      "eu-west-2": {
        "alinux": "ami-ed100689",
        "centos6": "ami-bf2c38db",
        "centos7": "ami-c22236a6",
        "rhel7": "ami-a1f5e4c5",
        "suse11": "ami-0e786e6a",
        "suse12": "ami-d97066bd",
        "ubuntu14": "ami-1c021378",
        "ubuntu16": "ami-996372fd"
      },
      "sa-east-1": {
        "alinux": "ami-87dab1eb",
        "centos6": "ami-19492b75",
        "centos7": "ami-864f2dea",
        "rhel7": "ami-a789ffcb",
        "suse11": "ami-f184ef9d",
        "suse12": "ami-52a4cf3e",
        "ubuntu14": "ami-4c93e420",
        "ubuntu16": "ami-10186f7c"
      },
      "us-east-1": {
        "alinux": "ami-a4c7edb2",
        "centos6": "ami-500d8546",
        "centos7": "ami-ae7bfdb8",
        "rhel7": "ami-c998b6b2",
        "suse11": "ami-1a775e0c",
        "suse12": "ami-8fac8399",
        "ubuntu14": "ami-841f46ff",
        "ubuntu16": "ami-cd0f5cb6"
      },
      "us-east-2": {
        "alinux": "ami-8a7859ef",
        "centos6": "ami-7dbe9a18",
        "centos7": "ami-9cbf9bf9",
        "rhel7": "ami-cfdafaaa",
        "suse11": "ami-24674641",
        "suse12": "ami-f990b69c",
        "ubuntu14": "ami-273a1a42",
        "ubuntu16": "ami-10547475"
      },
      "us-west-1": {
        "alinux": "ami-327f5352",
        "centos6": "ami-252a0f45",
        "centos7": "ami-7c280d1c",
        "rhel7": "ami-66eec506",
        "suse11": "ami-fcaf829c",
        "suse12": "ami-32c8e552",
        "ubuntu14": "ami-b2527ad2",
        "ubuntu16": "ami-09d2fb69"
      },
      "us-west-2": {
        "alinux": "ami-6df1e514",
        "centos6": "ami-112cbc71",
        "centos7": "ami-0c2aba6c",
        "rhel7": "ami-9fa343e7",
        "suse11": "ami-1ac2d763",
        "suse12": "ami-da786da3",
        "ubuntu14": "ami-718c6909",
        "ubuntu16": "ami-6e1a0117"
      }
    },
    "EbsOptimized": {
      "c3.2xlarge": {
        "EBSOpt": "True"
      },
      "c3.4xlarge": {
        "EBSOpt": "True"
      },
      "c3.8xlarge": {
        "EBSOpt": "False"
      },
      "c3.large": {
        "EBSOpt": "False"
      },
      "c3.xlarge": {
        "EBSOpt": "True"
      },
      "c4.2xlarge": {
        "EBSOpt": "True"
      },
      "c4.4xlarge": {
        "EBSOpt": "True"
      },
      "c4.8xlarge": {
        "EBSOpt": "True"
      },
      "c4.large": {
        "EBSOpt": "True"
      },
      "c4.xlarge": {
        "EBSOpt": "True"
      },
      "cc2.8xlarge": {
        "EBSOpt": "False"
      },
      "cg1.4xlarge": {
        "EBSOpt": "False"
      },
      "cr1.8xlarge": {
        "EBSOpt": "False"
      },
      "d2.2xlarge": {
        "EBSOpt": "True"
      },
      "d2.4xlarge": {
        "EBSOpt": "True"
      },
      "d2.8xlarge": {
        "EBSOpt": "True"
      },
      "d2.xlarge": {
        "EBSOpt": "True"
      },
      "f1.16xlarge": {
        "EBSOpt": "True"
      },
      "f1.2xlarge": {
        "EBSOpt": "True"
      },
      "g2.2xlarge": {
        "EBSOpt": "True"
      },
      "g2.8xlarge": {
        "EBSOpt": "True"
      },
      "i2.2xlarge": {
        "EBSOpt": "True"
      },
      "i2.4xlarge": {
        "EBSOpt": "True"
      },
      "i2.8xlarge": {
        "EBSOpt": "False"
      },
      "i2.large": {
        "EBSOpt": "False"
      },
      "i2.xlarge": {
        "EBSOpt": "True"
      },
      "i3.16xlarge": {
        "EBSOpt": "True"
      },
      "i3.2xlarge": {
        "EBSOpt": "True"
      },
      "i3.4xlarge": {
        "EBSOpt": "True"
      },
      "i3.8xlarge": {
        "EBSOpt": "True"
      },
      "i3.large": {
        "EBSOpt": "True"
      },
      "i3.xlarge": {
        "EBSOpt": "True"
      },
      "m3.2xlarge": {
        "EBSOpt": "True"
      },
      "m3.large": {
        "EBSOpt": "False"
      },
      "m3.medium": {
        "EBSOpt": "False"
      },
      "m3.xlarge": {
        "EBSOpt": "True"
      },
      "m4.10xlarge": {
        "EBSOpt": "True"
      },
      "m4.16xlarge": {
        "EBSOpt": "True"
      },
      "m4.2xlarge": {
        "EBSOpt": "True"
      },
      "m4.4xlarge": {
        "EBSOpt": "True"
      },
      "m4.large": {
        "EBSOpt": "True"
      },
      "m4.xlarge": {
        "EBSOpt": "True"
      },
      "p2.16xlarge": {
        "EBSOpt": "True"
      },
      "p2.8xlarge": {
        "EBSOpt": "True"
      },
      "p2.xlarge": {
        "EBSOpt": "True"
      },
      "r3.2xlarge": {
        "EBSOpt": "True"
      },
      "r3.4xlarge": {
        "EBSOpt": "True"
      },
      "r3.8xlarge": {
        "EBSOpt": "False"
      },
      "r3.large": {
        "EBSOpt": "False"
      },
      "r3.xlarge": {
        "EBSOpt": "True"
      },
      "r4.16xlarge": {
        "EBSOpt": "True"
      },
      "r4.2xlarge": {
        "EBSOpt": "True"
      },
      "r4.4xlarge": {
        "EBSOpt": "True"
      },
      "r4.8xlarge": {
        "EBSOpt": "True"
      },
      "r4.large": {
        "EBSOpt": "True"
      },
      "r4.xlarge": {
        "EBSOpt": "True"
      },
      "t2.2xlarge": {
        "EBSOpt": "False"
      },
      "t2.large": {
        "EBSOpt": "False"
      },
      "t2.medium": {
        "EBSOpt": "False"
      },
      "t2.micro": {
        "EBSOpt": "False"
      },
      "t2.nano": {
        "EBSOpt": "False"
      },
      "t2.small": {
        "EBSOpt": "False"
      },
      "t2.xlarge": {
        "EBSOpt": "False"
      },
      "x1.16xlarge": {
        "EBSOpt": "True"
      },
      "x1.32xlarge": {
        "EBSOpt": "True"
      }
    },
    "OSInfo": {
      "LoginID": {
        "alinux": "ec2-user",
        "centos6": "centos",
        "centos7": "centos",
        "rhel7": "ec2-user",
        "suse11": "root",
        "suse12": "root",
        "ubuntu14": "ubuntu",
        "ubuntu16": "ubuntu"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Instance Configuration"
          },
          "Parameters": [
            "InstanceType",
            "OperatingSystem",
            "KeyName",
            "SSHClusterKeyPub",
            "SSHClusterKeyPriv",
            "SSHBucketName",
            "UsePublicIp"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "VPCId",
            "Subnet",
            "SecurityGroups",
            "CreateElasticIP"
          ]
        },
        {
          "Label": {
            "default": "AutoScaling Group Configuration"
          },
          "Parameters": [
            "ClusterSize",
            "MaxClusterSize",
            "MinClusterSize"
          ]
        },
        {
          "Label": {
            "default": "Additional Configuration Parameters"
          },
          "Parameters": [
            "AdditionalBucketName",
            "EfsId"
          ]
        }
      ],
      "ParameterLabels": {
        "AdditionalBucketName": {
          "default": "Additional Bucket"
        },
        "ClusterSize": {
          "default": "Initial cluster size"
        },
        "CreateElasticIP": {
          "default": "Create and Elaastic IP"
        },
        "EfsId": {
          "default": "EFS File System ID"
        },
        "InstanceType": {
          "default": "Instance Type"
        },
        "KeyName": {
          "default": "EC2 Key Name"
        },
        "MaxClusterSize": {
          "default": "Maximum cluster size"
        },
        "MinClusterSize": {
          "default": "Minimum cluster size"
        },
        "OperatingSystem": {
          "default": "Instance OS"
        },
        "SSHBucketName": {
          "default": "SSH Bucket"
        },
        "SSHClusterKeyPriv": {
          "default": "SSH Private Key Name"
        },
        "SSHClusterKeyPub": {
          "default": "SSH Public Key Name"
        },
        "SecurityGroups": {
          "default": "Security Groups"
        },
        "Subnet": {
          "default": "Subnet ID"
        },
        "UsePublicIp": {
          "default": "Use a Public IP"
        },
        "VPCId": {
          "default": "VPI ID"
        }
      }
    }
  },
  "Outputs": {
    "ElasticIP": {
      "Description": "Elastic IP address for the cluster",
      "Value": {
        "Ref": "EIPAddress"
      }
    }
  },
  "Parameters": {
    "AdditionalBucketName": {
      "Description": "Additional bucket for other files.",
      "Type": "String"
    },
    "ClusterSize": {
      "ConstraintDescription": "Should be an integer",
      "Default": "2",
      "Description": "Initial number of instances",
      "Type": "Number"
    },
    "CreateElasticIP": {
      "AllowedValues": [
        "True",
        "False"
      ],
      "ConstraintDescription": "True/False",
      "Default": "True",
      "Description": "Create an Elasic IP address, that will be assinged to an instance in the stack",
      "Type": "String"
    },
    "EfsId": {
      "Description": "EFS ID (e.g. fs-1234abcd)",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "r4.4xlarge",
        "r4.8xlarge",
        "r4.16xlarge",
        "t2.2xlarge"
      ],
      "ConstraintDescription": "Must be a valid instance type for that region, with HVM64 support",
      "Default": "c4.8xlarge",
      "Description": "My instance type",
      "Type": "String"
    },
    "KeyName": {
      "ConstraintDescription": "Must be: alinux, centos6, centos7, rhel7, suse11, suse12, ubuntu14, ubuntu16",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "MaxClusterSize": {
      "ConstraintDescription": "Should be an integer",
      "Default": "2",
      "Description": "Max number of instances that can be launch in the ASG",
      "Type": "Number"
    },
    "MinClusterSize": {
      "ConstraintDescription": "Should be an integer",
      "Default": "0",
      "Description": "Min number of instances that can be launch in the ASG (should be left at 0)",
      "Type": "Number"
    },
    "OperatingSystem": {
      "AllowedValues": [
        "alinux",
        "centos6",
        "centos7",
        "rhel7",
        "suse11",
        "suse12",
        "ubuntu14",
        "ubuntu16"
      ],
      "ConstraintDescription": "Must be: alinux, centos6, centos7, rhel7, suse11, suse12, ubuntu14, ubuntu16",
      "Default": "alinux",
      "Description": "Operating System",
      "Type": "String"
    },
    "SSHBucketName": {
      "ConstraintDescription": "Existing bucket where the ssh keyes are stored",
      "Description": "REQUIRED:  Bucket for the ssh keys (named below)",
      "Type": "String"
    },
    "SSHClusterKeyPriv": {
      "Default": "id_rsa",
      "Description": "REQUIRED:  Private key name for ssh between instances in cluster",
      "Type": "String"
    },
    "SSHClusterKeyPub": {
      "Default": "id_rsa.pub",
      "Description": "REQUIRED:  Public key name for ssh between instances in cluster",
      "Type": "String"
    },
    "SecurityGroups": {
      "Description": "REQUIRED: Security Groups IDs",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "Subnet": {
      "Description": "Subnet IDs",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "UsePublicIp": {
      "AllowedValues": [
        "True",
        "False"
      ],
      "ConstraintDescription": "True/False",
      "Default": "True",
      "Description": "Should a public IP address be given to the instance",
      "Type": "String"
    },
    "VPCId": {
      "Description": "VPC Id for this instance",
      "Type": "AWS::EC2::VPC::Id"
    }
  },
  "Resources": {
    "AutoScalingGroup01": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": {
            "Ref": "ClusterSize"
          },
          "Timeout": "PT60M"
        }
      },
      "Properties": {
        "Cooldown": 10,
        "DesiredCapacity": {
          "Ref": "ClusterSize"
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "MaxSize": {
          "Ref": "MaxClusterSize"
        },
        "MinSize": {
          "Ref": "MinClusterSize"
        },
        "PlacementGroup": {
          "Ref": "PlacementGroup"
        },
        "VPCZoneIdentifier": {
          "Ref": "Subnet"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "EIPAddress": {
      "Condition": "create_elastic_ip",
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "LaunchConfiguration": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/opt/aws/setup-tools/gethostinfo.py": {
                "content": {
                  "Fn::Base64": {
                    "Fn::Join": [
                      "",
                      [
                        "#!/usr/bin/python\n",
                        "\n",
                        "import os,sys\n",
                        "import boto3\n",
                        "import argparse\n",
                        "import time\n",
                        "import operator\n",
                        "\n",
                        "def print_priv_dns(instances, ec2):\n",
                        "\n",
                        "    for i in instances:\n",
                        "        print(ec2.Instance(i).private_dns_name.replace('.ec2.internal', ''))\n",
                        "\n",
                        "def get_asg_from_stack(stack_name, client):\n",
                        "\n",
                        "    asg = list()\n",
                        "\n",
                        "    stk_response = client.describe_stack_resources(StackName=stack_name)\n",
                        "\n",
                        "    for resp in stk_response['StackResources']:\n",
                        "        for resrc_type in resp:\n",
                        "            if resrc_type == \"ResourceType\":\n",
                        "                if resp[resrc_type] == \"AWS::AutoScaling::AutoScalingGroup\":\n",
                        "                    asg.append(resp['PhysicalResourceId'])\n",
                        "\n",
                        "    return asg\n",
                        "\n",
                        "def get_inst_from_asg(asg, client_asg, ec2 ):\n",
                        "\n",
                        "    response = client_asg.describe_auto_scaling_groups(AutoScalingGroupNames=[asg])\n",
                        "\n",
                        "    instances = list()\n",
                        "    # Build instance IDs list\n",
                        "    for r in response['AutoScalingGroups']:\n",
                        "        for i in r['Instances']:\n",
                        "            instances.append(ec2.Instance(i['InstanceId']).instance_id)\n",
                        "\n",
                        "    return instances\n",
                        "\n",
                        "\n",
                        "def main():\n",
                        "\n",
                        "    region = \"",
                        {
                          "Ref": "AWS::Region"
                        },
                        "\"\n",
                        "    stack_name = \"",
                        {
                          "Ref": "AWS::StackName"
                        },
                        "\"\n",
                        "    instances = list()\n",
                        "\n",
                        "    asg_client = boto3.client('autoscaling', region_name=region)\n",
                        "    ec2 = boto3.resource('ec2', region_name=region)\n",
                        "    cfn_client = boto3.client('cloudformation', region_name=region)\n",
                        "\n",
                        "    asg_list = get_asg_from_stack(stack_name, cfn_client)\n",
                        "\n",
                        "    for asg in asg_list:\n",
                        "        for i in get_inst_from_asg(asg, asg_client, ec2):\n",
                        "            instances.append(i)\n",
                        "\n",
                        "    print_priv_dns(instances, ec2)\n",
                        "\n",
                        "\n",
                        "\n",
                        "if __name__ == '__main__':\n",
                        "    try:\n",
                        "        sys.exit(main())\n",
                        "    except KeyboardInterrupt:\n",
                        "        print 'Received Keyboard interrupt.'\n",
                        "        print 'Exiting...'\n"
                      ]
                    ]
                  }
                },
                "encoding": "base64",
                "group": {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                },
                "mode": "000700",
                "owner": {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                }
              },
              "/opt/aws/setup-tools/setup-env-file.sh": {
                "content": {
                  "Fn::Base64": {
                    "Fn::Join": [
                      "",
                      [
                        "#!/bin/bash -x\n",
                        "\n",
                        "if [[ $1 ]]; then\n",
                        "  my_inst_file=$1\n",
                        "else\n",
                        "  my_inst_file=/opt/aws/setup-tools/my-instance-info.conf\n",
                        "fi\n",
                        "\n",
                        "source $my_inst_file\n",
                        "\n",
                        "home_dir=/home/$login_user\n",
                        "if [[ \"$login_user\" = \"\" ]]; then\n",
                        "  login_user=\"root\"\n",
                        "  home_dir=\"/root\"\n",
                        "fi\n",
                        "echo my_inst_file=$my_inst_file >> $my_inst_file\n",
                        "echo my_instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id) >> $my_inst_file\n",
                        "echo operating_system=",
                        {
                          "Ref": "OperatingSystem"
                        },
                        " >> $my_inst_file\n",
                        "echo login_user=$login_user >> $my_inst_file\n",
                        "echo home_dir=$home_dir >> $my_inst_file\n",
                        "echo gethostinfo_filename=$setup_tools_dir/gethostinfo.py >> $my_inst_file\n",
                        "\n",
                        "source $my_inst_file\n",
                        "\n"
                      ]
                    ]
                  }
                },
                "encoding": "base64",
                "group": {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                },
                "mode": "000700",
                "owner": {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                }
              },
              "/opt/aws/setup-tools/setup-inst.py": {
                "content": {
                  "Fn::Base64": {
                    "Fn::Join": [
                      "",
                      [
                        "#!/usr/bin/python\n",
                        "\n",
                        "import os,sys\n",
                        "import boto3\n",
                        "import argparse\n",
                        "import time\n",
                        "import operator\n",
                        "\n",
                        "'''\n",
                        "Description:\n",
                        "Wait for all instances to be 'running', and then set the\n",
                        "Elastic IP address to the instance that has been up the longest.\n",
                        "'''\n",
                        "\n",
                        "\n",
                        "def set_inst_eip (eip, my_instance_id, my_inst_file, instances, client):\n",
                        "\n",
                        "    launch_time = dict()\n",
                        "\n",
                        "    i = dict()\n",
                        "    response = client.describe_instances(InstanceIds=instances,DryRun=False)\n",
                        "    for r in response['Reservations']:\n",
                        "        for resp_i in (r['Instances']):\n",
                        "            i = resp_i['InstanceId']\n",
                        "            time_tuple = (resp_i['LaunchTime'].timetuple())\n",
                        "            launch_time_secs = time.mktime(time_tuple)\n",
                        "            launch_time[i] = launch_time_secs\n",
                        "\n",
                        "    launch_time_list = sorted(launch_time.items(), key=operator.itemgetter(1))\n",
                        "    inst_to_alloc_eip = launch_time_list[1][0]\n",
                        "\n",
                        "    if inst_to_alloc_eip == my_instance_id:\n",
                        "        response = client.associate_address(InstanceId=inst_to_alloc_eip, PublicIp=eip, DryRun=False)\n",
                        "        f = open(my_inst_file, 'a')\n",
                        "        f.write('eip_instance={0}\\n'.format(inst_to_alloc_eip))\n",
                        "        f.close()\n",
                        "        print('Assigned {0} to instance {1}'.format(eip, inst_to_alloc_eip))\n",
                        "\n",
                        "\n",
                        "def all_inst_running(instances, client):\n",
                        "\n",
                        "    num_inst = len(instances)\n",
                        "\n",
                        "    response = client.describe_instance_status(InstanceIds=instances, IncludeAllInstances=False)\n",
                        "\n",
                        "    running = list()\n",
                        "    not_running = list()\n",
                        "\n",
                        "    for r in response['InstanceStatuses']:\n",
                        "        #print(r)\n",
                        "        if (r['InstanceState']['Name']) == 'running':\n",
                        "            running.append(r['InstanceId'])\n",
                        "        else:\n",
                        "            not_running.append(r['InstanceId'])\n",
                        "\n",
                        "    if len(running) == num_inst:\n",
                        "        return True, len(running), running\n",
                        "\n",
                        "    return False, len(not_running), not_running\n",
                        "\n",
                        "def get_asg_from_stack(stack_name, client):\n",
                        "\n",
                        "    asg = list()\n",
                        "\n",
                        "    stk_response = client.describe_stack_resources(StackName=stack_name)\n",
                        "\n",
                        "    for resp in stk_response['StackResources']:\n",
                        "        for resrc_type in resp:\n",
                        "            if resrc_type == \"ResourceType\":\n",
                        "                if resp[resrc_type] == \"AWS::AutoScaling::AutoScalingGroup\":\n",
                        "                    asg.append(resp['PhysicalResourceId'])\n",
                        "\n",
                        "    return asg\n",
                        "\n",
                        "def get_inst_from_asg(asg, client_asg, ec2 ):\n",
                        "\n",
                        "    response = client_asg.describe_auto_scaling_groups(AutoScalingGroupNames=[asg])\n",
                        "\n",
                        "    instances = list()\n",
                        "    # Build instance IDs list\n",
                        "    for r in response['AutoScalingGroups']:\n",
                        "        for i in r['Instances']:\n",
                        "            instances.append(ec2.Instance(i['InstanceId']).instance_id)\n",
                        "\n",
                        "    return instances\n",
                        "\n",
                        "\n",
                        "def main():\n",
                        "\n",
                        "    my_instance_id = sys.argv[1]\n",
                        "    my_inst_file = sys.argv[2]\n",
                        "    total_instances = sys.argv[3]\n",
                        "\n",
                        "    region = \"",
                        {
                          "Ref": "AWS::Region"
                        },
                        "\"\n",
                        "    stack_name = \"",
                        {
                          "Ref": "AWS::StackName"
                        },
                        "\"\n",
                        "    ip_addr = \"",
                        {
                          "Ref": "EIPAddress"
                        },
                        "\"\n",
                        "    instances = list()\n",
                        "\n",
                        "    asg_client = boto3.client('autoscaling', region_name=region)\n",
                        "    ec2 = boto3.resource('ec2', region_name=region)\n",
                        "    cfn_client = boto3.client('cloudformation', region_name=region)\n",
                        "    stk_response = cfn_client.describe_stacks(StackName=stack_name)\n",
                        "    client_ec2 = boto3.client('ec2', region_name=region)\n",
                        "\n",
                        "    asg_list = get_asg_from_stack(stack_name, cfn_client)\n",
                        "\n",
                        "    while True:\n",
                        "        if int(total_instances) == len(instances):\n",
                        "            break\n",
                        "        for asg in asg_list:\n",
                        "            for i in get_inst_from_asg(asg, asg_client, ec2):\n",
                        "                if i not in instances:\n",
                        "                    instances.append(i)\n",
                        "        time.sleep(10)\n",
                        "\n",
                        "    all_running_status = False\n",
                        "    inst_count = 0\n",
                        "\n",
                        "    while not all_running_status:\n",
                        "        (all_running_status, inst_count, inst_status_list) = all_inst_running(instances, client_ec2)\n",
                        "        if not all_running_status:\n",
                        "            print('Waiting for all instances to be running')\n",
                        "            print('Instances not running {0}'.format((', ').join(inst_status_list)))\n",
                        "            time.sleep(10)\n",
                        "\n",
                        "    print(\"All {0} instances running\".format(all_inst_running(instances, client_ec2)))\n",
                        "\n",
                        "    time.sleep(5)\n",
                        "    set_inst_eip(ip_addr, my_instance_id, my_inst_file, instances, client_ec2)\n",
                        "\n",
                        "if __name__ == '__main__':\n",
                        "    try:\n",
                        "        sys.exit(main())\n",
                        "    except KeyboardInterrupt:\n",
                        "        print 'Received Keyboard interrupt.'\n",
                        "        print 'Exiting...'\n",
                        "\n"
                      ]
                    ]
                  }
                },
                "encoding": "base64",
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/opt/aws/setup-tools/setup-main.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash -x\n",
                      "\n",
                      "total_instances=",
                      {
                        "Ref": "ClusterSize"
                      },
                      "\n",
                      "function ck_for_yum_lck {\n",
                      "  if [[ -f  /var/run/yum.pid ]]; then\n",
                      "    sleep 30\n",
                      "  fi\n",
                      "  killall -9 yum\n",
                      "}\n",
                      "\n",
                      "if [[ $1 ]]; then\n",
                      "  my_inst_file=$1\n",
                      "else\n",
                      "  my_inst_file=/opt/aws/setup-tools/my-instance-info.conf\n",
                      "fi\n",
                      "\n",
                      "source $my_inst_file\n",
                      "\n",
                      "ck_for_yum_lck\n",
                      "yum install -y aws-cfn-bootstrap\n",
                      "yum install --enablerepo=epel pdsh -y\n",
                      "pip install awscli boto3\n",
                      "\n",
                      "/opt/aws/setup-tools/setup-inst.py $my_instance_id $my_inst_file $total_instances\n",
                      "/opt/aws/setup-tools/setup-ssh.sh $my_inst_file\n",
                      "\n",
                      "source $my_inst_file\n",
                      "\n",
                      "if [[ \"$my_instance_id\" = \"$eip_instance\" ]]; then\n",
                      "  ln -s /opt/aws/setup-tools/updatehostinfo.sh /usr/local/bin/updatehostinfo\n",
                      "  ln -s /opt/aws/setup-tools/gethostinfo.py /usr/local/bin/gethostinfo\n",
                      "  /bin/su $login_user -c \"/opt/aws/setup-tools/updatehostinfo.sh /opt/aws/setup-tools/my-instance-info.conf\"\n",
                      "  /bin/su $login_user -c \"echo >> ~/.bash_profile; echo export WCOLL=$home_dir/hosts.all >> ~/.bash_profile\"\n",
                      "fi\n",
                      "\n",
                      "exit 0\n",
                      "\n"
                    ]
                  ]
                },
                "encoding": "plain",
                "group": {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                },
                "mode": "000700",
                "owner": {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                }
              },
              "/opt/aws/setup-tools/setup-ssh.sh": {
                "content": {
                  "Fn::Base64": {
                    "Fn::Join": [
                      "",
                      [
                        "#!/bin/bash -x\n",
                        "\n",
                        "if [[ $1 ]]; then\n",
                        "  my_inst_file=$1\n",
                        "else\n",
                        "  my_inst_file=/opt/aws/setup-tools/my-instance-info.conf\n",
                        "fi\n",
                        "\n",
                        "source $my_inst_file\n",
                        "\n",
                        "echo Copying ssh keys to $home_dir/.ssh\n",
                        "\n",
                        "ssh_bucket=\"",
                        {
                          "Ref": "SSHBucketName"
                        },
                        "\"\n",
                        "ssh_keypriv=\"",
                        {
                          "Ref": "SSHClusterKeyPriv"
                        },
                        "\"\n",
                        "ssh_keypub=\"",
                        {
                          "Ref": "SSHClusterKeyPub"
                        },
                        "\"\n",
                        "\n",
                        "aws s3 cp s3://$ssh_bucket/$ssh_keypriv $home_dir/.ssh/id_rsa\n",
                        "aws s3 cp s3://$ssh_bucket/$ssh_keypub $home_dir/.ssh/id_rsa.pub\n",
                        "\n",
                        "cat $home_dir/.ssh/id_rsa.pub >> $home_dir/.ssh/authorized_keys\n",
                        "chown ${login_user}:${login_user} $home_dir/.ssh/id_rsa.pub $home_dir/.ssh/id_rsa $home_dir/.ssh/authorized_keys\n",
                        "chmod 600 $home_dir/.ssh/id_rsa.pub $home_dir/.ssh/id_rsa\n",
                        "\n",
                        "exit 0\n"
                      ]
                    ]
                  }
                },
                "encoding": "base64",
                "group": "root",
                "mode": "000700",
                "owner": "root"
              },
              "/opt/aws/setup-tools/updatehostinfo.sh": {
                "content": {
                  "Fn::Base64": {
                    "Fn::Join": [
                      "",
                      [
                        "#!/bin/bash\n",
                        "\n",
                        "if [[ $1 ]]; then\n",
                        "  my_inst_info=$1\n",
                        "else\n",
                        "  my_inst_info=/opt/aws/setup-tools/my-instance-info.conf\n",
                        "fi\n",
                        "\n",
                        "source $my_inst_info\n",
                        "\n",
                        "for h in $($setup_tools_dir/gethostinfo.py); do\n",
                        "    ssh -o StrictHostKeyChecking=no $h date > /dev/null;\n",
                        "done\n",
                        "\n",
                        "echo -n \"Creating/Updating $home_dir/hosts.all ...\"\n",
                        "$setup_tools_dir/gethostinfo.py > $home_dir/hosts.all\n",
                        "echo \"done\"\n",
                        "\n",
                        "exit 0"
                      ]
                    ]
                  }
                },
                "encoding": "base64",
                "group": {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                },
                "mode": "000700",
                "owner": {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": {
          "Ref": "UsePublicIp"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdh",
            "Ebs": {
              "DeleteOnTermination": "true",
              "Encrypted": "false",
              "VolumeSize": "20",
              "VolumeType": "gp2"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "RootInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionAMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroups"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "\n",
                "login_user=",
                {
                  "Fn::FindInMap": [
                    "OSInfo",
                    "LoginID",
                    {
                      "Ref": "OperatingSystem"
                    }
                  ]
                },
                "\n",
                "region=\"",
                {
                  "Ref": "AWS::Region"
                },
                "\"\n",
                "stack_name=\"",
                {
                  "Ref": "AWS::StackName"
                },
                "\"\n",
                "setup_tools_dir=/opt/aws/setup-tools\n",
                "asg_name=\"AutoScalingGroup01\"\n",
                "init_cluster_size=\"",
                {
                  "Ref": "ClusterSize"
                },
                "\"\n",
                "eip_address=\"",
                {
                  "Ref": "EIPAddress"
                },
                "\"\n",
                "\n",
                "#@IgnoreInspection BashAddShebang\n",
                "\n",
                "function ck_for_yum_lck {\n",
                "  if [[ -f  /var/run/yum.pid ]]; then\n",
                "    sleep 30\n",
                "  fi\n",
                "  killall -9 yum\n",
                "}\n",
                "\n",
                "function fix_cfn_init {\n",
                "  # Setup CFN init and signal\n",
                "  CFN_INIT=$(rpm -ql aws-cfn-bootstrap | grep cfn-init$)\n",
                "  test_cfn_init_rc=$?\n",
                "\n",
                "  if [[ \"$test_cfn_init_rc\" != 0 ]]; then\n",
                "      if [[ \"$operating_system\" = \"rhel7\" ]]; then\n",
                "          yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n",
                "      else\n",
                "          yum install epel-release -y\n",
                "      fi\n",
                "\n",
                "      yum install pystache python-daemon python-setuptools -y\n",
                "      curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",
                "      rpm -ivh aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n",
                "      export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.7/site-packages\n",
                "  fi\n",
                "}\n",
                "\n",
                "function build_host_file {\n",
                "\n",
                "  let max_wait_time=900  # in seconds\n",
                "  let tot_wait_time=0\n",
                "  let sleep_time=5\n",
                "\n",
                "  export WCOLL=$home_dir/hosts.all\n",
                "  let total_instances=$(/bin/su $login_user -c \"pdsh date 2>/dev/null | wc -l\")\n",
                "  while [[ \"$total_instances\" -lt \"$init_cluster_size\" ]]; do\n",
                "    echo \"Updating host info ...\"\n",
                "    /bin/su $login_user -c $setup_tools_dir/updatehostinfo.sh\n",
                "    echo \"Running 'pdsh date' to determine reachable instance count\"\n",
                "    let total_instances=$(/bin/su $login_user -c \"pdsh date 2>/dev/null | wc -l\")\n",
                "    if [[ \"$total_instances\" -lt \"$init_cluster_size\" ]]; then\n",
                "        /bin/su $login_user -c 'pdsh date 2>&1 | grep \"Connection refused\" | awk {'print $6'} > ~/hosts.unreachable'\n",
                "    fi\n",
                "    sleep $sleep_time\n",
                "    let \"tot_wait_time=$tot_wait_time + $sleep_time\"\n",
                "    if [[ \"$tot_wait_time\" -ge \"$max_wait_time\" ]]; then\n",
                "      echo \"ERROR:  Could not reach all instances with pdsh\"\n",
                "      echo \"Check ~/hosts.unreachable or run 'pdsh date' to find unreachable instances\"\n",
                "      echo \"Exiting...\"\n",
                "      return\n",
                "    fi\n",
                "  done\n",
                "\n",
                "  echo \"All instances reachable\"\n",
                "  return\n",
                "\n",
                "}\n",
                "\n",
                "ck_for_yum_lck\n",
                "fix_cfn_init\n",
                "\n",
                "yum update aws-cfn-bootstrap -y\n",
                "\n",
                "CFN_INIT=$(rpm -ql aws-cfn-bootstrap | grep cfn-init$)\n",
                "$CFN_INIT -v --stack $stack_name --resource LaunchConfiguration --region $region\n",
                "cfn_init_rc=$?\n",
                "\n",
                "if [[ \"$cfn_init_rc\" != 0 ]]; then\n",
                "  shutdown now\n",
                "fi\n",
                "\n",
                "# Setup config file\n",
                "mkdir $setup_tools_dir\n",
                "chmod 755 $setup_tools_dir\n",
                "my_inst_file=$setup_tools_dir/my-instance-info.conf\n",
                "echo login_user=$login_user >> $my_inst_file\n",
                "echo setup_tools_dir=$setup_tools_dir >> $my_inst_file\n",
                "\n",
                "# run environment setup and main function\n",
                "$setup_tools_dir/setup-env-file.sh $my_inst_file\n",
                "$setup_tools_dir/setup-main.sh $my_inst_file\n",
                "setup_main_rc=$?\n",
                "\n",
                "source $my_inst_file\n",
                "\n",
                "if [[ \"$my_instance_id\" = \"$eip_instance\" ]]; then\n",
                "  build_host_file\n",
                "fi\n",
                "\n",
                "cfn_sig_error_code=$setup_main_rc\n",
                "\n",
                "CFN_SIG=$(rpm -ql aws-cfn-bootstrap | grep cfn-signal$)\n",
                "$CFN_SIG -e $cfn_sig_error_code --stack $stack_name --resource $asg_name --region $region\n",
                "\n",
                "curl http://169.254.169.254/latest/user-data > $setup_tools_dir/user-data.sh;\n",
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "PlacementGroup": {
      "Properties": {
        "Strategy": "cluster"
      },
      "Type": "AWS::EC2::PlacementGroup"
    },
    "RootInstanceProfile": {
      "Properties": {
        "Roles": [
          {
            "Ref": "RootRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "RootRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "SSHBucketName"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "SSHBucketName"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "AdditionalBucketName"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "AdditionalBucketName"
                        }
                      ]
                    ]
                  }
                }
              ]
            },
            "PolicyName": "s3bucketaccess"
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeInstanceStatus",
                    "ec2:AssociateAddress"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "ec2describe"
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "cloudformation:DescribeStacks",
                    "cloudformation:DescribeStackResources"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "cfndescribe"
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "autoscaling:DescribeAutoScalingGroups"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "asgdescribe"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    }
  }
}
